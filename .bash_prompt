#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

# Check if inside a tmux session; see also .tmux.conf
if [[ -z "$TMUX" ]]; then
    if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
        export TERM='gnome-256color'
    elif infocmp xterm-256color >/dev/null 2>&1; then
        export TERM='xterm-256color'
    fi
else
    export TERM='screen-256color'
fi

prompt_git() {
    local s='';
    local branchName='';
    local uncommittedCount=0;

    # Check if the current directory is in a Git repository.
    git rev-parse --is-inside-work-tree &>/dev/null || return;

    # Determine the project name from the Git remote URL
    local projectName
    projectName="$(basename -s .git "$(git config --get remote.origin.url)")";

    # Determine branch name
    # Check for what branch we’re on.
    # Get the short symbolic ref. If HEAD isn’t a symbolic ref, get a
    # tracking remote branch or tag. Otherwise, get the
    # short SHA for the latest commit, or give up.
    branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
        git describe --all --exact-match HEAD 2> /dev/null || \
        git rev-parse --short HEAD 2> /dev/null || \
        echo '(unknown)')";

    # Check for uncommitted changes in the index.
    if ! git diff --quiet --ignore-submodules --cached; then
        s+='+';
    fi;
    # Check for unstaged changes.
    if ! git diff-files --quiet --ignore-submodules --; then
        s+='!';
    fi;
    # Count untracked files.
    uncommittedCount=$(git status --porcelain | wc -l | tr -d ' ');
    if [ "${uncommittedCount}" -gt 0 ]; then
        s+="?${uncommittedCount}";
    fi;
    # Check for stashed files.
    if git rev-parse --verify refs/stash &>/dev/null; then
        s+='$';
    fi;

    [ -n "${s}" ] && s=" [${s}]";

    echo -e "${1}${projectName} -> ${branchName}${2}${s}";
}
export -f prompt_git;

if tput setaf 1 &> /dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Solarized colors, taken from http://git.io/solarized-colors
        # blue, green, yellow taken from selections
	# https://commons.wikimedia.org/wiki/File:Xterm_256color_chart.svg
	black=$(tput setaf 0);
	blue=$(tput setaf 33);
	cyan=$(tput setaf 37);
	green=$(tput setaf 64);
	orange=$(tput setaf 166);
	purple=$(tput setaf 125);
	red=$(tput setaf 124);
	violet=$(tput setaf 61);
	white=$(tput setaf 15);
	yellow=$(tput setaf 136);
else
	bold='';
	reset="\e[0m";
	black="\e[1;30m";
	blue="\e[1;34m";
	cyan="\e[1;36m";
	green="\e[1;32m";
	orange="\e[1;33m";
	purple="\e[1;35m";
	red="\e[1;31m";
	violet="\e[1;35m";
	white="\e[1;37m";
	yellow="\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${blue}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${blue}";
fi;

# Adjusted PS1 without an explicit new line at the beginning
PS1=""; # Start with an empty string to build the prompt

# Username and host
PS1+="\[${userStyle}\]\u"; # username
PS1+="\[${white}\]@";
PS1+="\[${hostStyle}\]\h"; # host

# Working directory
PS1+="\[${white}\] in ";
PS1+="\[${violet}\]\w"; # working directory

# Git repository details
PS1+="\$(prompt_git \"\[${white}\] project \[${blue}\]\" \"\[${blue}\]\")";

# Space before the `$` prompt symbol and ensure it's on the same line
PS1+=" "; # Add a space before the prompt symbol

# newline
PS1+="\n";

# `$` prompt symbol
PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (with a space before it) and reset color

export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
