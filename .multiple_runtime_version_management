#!/usr/bin/env bash

# asdf settings
# Configure asdf (see https://asdf-vm.com/guide/getting-started.html)
# User urls when installing plugins see https://github.com/asdf-vm/asdf-plugins?tab=readme-ov-file#plugin-list
# VerbLog function is defined globally and available before this script is sourced

# Helper function to check if a command exists
if ! declare -f _cfg_command_exists > /dev/null; then
    _cfg_command_exists() {
      command -v "$1" >/dev/null 2>&1
    }
fi

# --- Main ASDF Setup Function ---
_cfg_asdf_setup_main() {
    local ASDF_DATA_DIR="${HOME}/.asdf" # Plugins, tool versions, and shims always go here
    local ASDF_FRESHLY_INSTALLED_FLAG_FILE="${ASDF_DATA_DIR}/.cfg_asdf_plugins_pending"
    local install_scenario=""
    local ASDF_INSTALLED_SUCCESSFULLY=false
    local OS_TYPE # Will be set by _cfg_asdf_determine_install_scenario
    local SUDO_CMD # Will store 'sudo' or be empty
    local _CFG_ASDF_SCRIPT_TO_SOURCE="" # Temp var for path to asdf.sh
    local _CFG_ASDF_COMPLETIONS_PATH="" # Temp var for path to completions

    verbLog 2 "ASDF_SETUP: Starting ASDF environment configuration..."

    # --- Scenario Determination Function (nested for encapsulation) ---
    _cfg_asdf_determine_install_scenario() {
        local scenario_result="recommend_manual_or_brew_install" # Default fallback
        OS_TYPE="$(uname -s)" # Set the outer scope OS_TYPE for use in messages

        verbLog 3 "ASDF_SETUP: Determining OS and PM. OS_TYPE=${OS_TYPE}"

        if _cfg_command_exists asdf && asdf --version &>/dev/null; then
            scenario_result="already_installed"
            verbLog 2 "ASDF_SETUP: Scenario: asdf already installed and working."
        elif [ "$OS_TYPE" = "Darwin" ]; then # macOS
            if _cfg_command_exists brew; then
                scenario_result="macos_brew"
                verbLog 2 "ASDF_SETUP: Scenario: macOS with Homebrew."
            else
                scenario_result="macos_needs_brew_fallback"
                verbLog 2 "ASDF_SETUP: Scenario: macOS, Homebrew not found."
            fi
        elif [ "$OS_TYPE" = "Linux" ]; then
            if grep -q -E "ID=fedora|ID_LIKE=fedora" /etc/os-release 2>/dev/null; then
                if _cfg_command_exists dnf; then
                    scenario_result="linux_fedora_dnf"
                    verbLog 2 "ASDF_SETUP: Scenario: Fedora Linux with dnf."
                else
                    scenario_result="linux_fedora_needs_dnf_fallback"
                    verbLog 2 "ASDF_SETUP: Scenario: Fedora Linux, dnf not found."
                fi
            elif _cfg_command_exists brew; then # Homebrew on other Linux
                scenario_result="linux_brew"
                verbLog 2 "ASDF_SETUP: Scenario: Non-Fedora Linux with Homebrew."
            else # Not Fedora, and Homebrew not found on Linux
                scenario_result="linux_needs_brew_fallback" # Default to recommending brew for general Linux
                verbLog 2 "ASDF_SETUP: Scenario: Non-Fedora Linux, Homebrew not found."
            fi
        else
            verbLog 2 "ASDF_SETUP: Scenario: OS type '${OS_TYPE}' is unsupported. Recommending manual/Homebrew install."
            scenario_result="unsupported_os_needs_brew_fallback"
        fi
        echo "$scenario_result"
    }
    # --- End of Scenario Determination Function ---

    install_scenario=$(_cfg_asdf_determine_install_scenario)

    # --- Block for ONE-TIME ASDF CORE INSTALLATION ---
    if [ "$install_scenario" != "already_installed" ]; then
        verbLog 1 "ASDF_SETUP: asdf not found or not working. Attempting installation based on scenario: ${install_scenario}"
        rm -f "${ASDF_FRESHLY_INSTALLED_FLAG_FILE}" # Ensure flag is clean before attempting install

        case "$install_scenario" in
            "macos_brew")
                verbLog 1 "ASDF_SETUP: macOS: Attempting to install/update asdf via Homebrew..."
                if brew install asdf; then ASDF_INSTALLED_SUCCESSFULLY=true; else
                    verbLog 0 "ASDF_SETUP: macOS: 'brew install asdf' failed."
                fi
                ;;
            "linux_fedora_dnf")
                verbLog 1 "ASDF_SETUP: Fedora Linux: Attempting to install/update asdf via dnf..."
                if _cfg_command_exists sudo && sudo -v &>/dev/null; then # Check for sudo and cache credentials
                    if sudo dnf install -y asdf; then ASDF_INSTALLED_SUCCESSFULLY=true; else
                        verbLog 0 "ASDF_SETUP: Fedora Linux: 'sudo dnf install -y asdf' failed."
                    fi
                else
                    verbLog 0 "ASDF_SETUP: Fedora Linux: sudo not available or authentication failed. Cannot install asdf via dnf."
                fi
                ;;
            "linux_brew")
                verbLog 1 "ASDF_SETUP: Linux: Attempting to install/update asdf via Homebrew..."
                if brew install asdf; then ASDF_INSTALLED_SUCCESSFULLY=true; else
                    verbLog 0 "ASDF_SETUP: Linux: 'brew install asdf' (via Homebrew on Linux) failed."
                fi
                ;;
            "macos_needs_brew_fallback" | "linux_needs_brew_fallback" | "unsupported_os_needs_brew_fallback" | "recommend_manual_or_brew_install")
                verbLog 0 "ASDF_SETUP: Required package manager (Homebrew) not found for automatic asdf installation on this system (${OS_TYPE:-unknown})."
                verbLog 0 "ASDF_SETUP: Please install Homebrew from https://brew.sh and then re-run this setup."
                verbLog 0 "ASDF_SETUP: Alternatively, install asdf manually from https://asdf-vm.com"
                ;;
            "linux_fedora_needs_dnf_fallback")
                verbLog 0 "ASDF_SETUP: Fedora Linux: dnf command not found. Please ensure dnf is available."
                verbLog 0 "ASDF_SETUP: Alternatively, install Homebrew from https://brew.sh and re-run this setup, or install asdf manually."
                ;;
            *)
                verbLog 0 "ASDF_SETUP: Internal error or unhandled scenario: '${install_scenario}'. Please install asdf manually."
                ;;
        esac

        if [ "$ASDF_INSTALLED_SUCCESSFULLY" = true ]; then
            verbLog 1 "ASDF_SETUP: asdf core successfully installed/updated by package manager."
            mkdir -p "${ASDF_DATA_DIR}" # Ensure data dir exists
            touch "${ASDF_FRESHLY_INSTALLED_FLAG_FILE}"
            if ! (_cfg_command_exists asdf && asdf --version &>/dev/null); then
                verbLog 0 "ASDF_SETUP: asdf installation reported success via PM, but 'asdf --version' still fails. Check PATH or PM setup."
            fi
        else
            # Avoid double messaging if a specific "PM not found" message was already issued.
            if [[ "$install_scenario" != "already_installed" && \
                  "$install_scenario" != *"_fallback" && \
                  "$install_scenario" != "macos_needs_brew_fallback" && \
                  "$install_scenario" != "linux_fedora_needs_dnf_fallback" && \
                  "$install_scenario" != "linux_needs_brew_fallback" && \
                  "$install_scenario" != "unsupported_os_needs_brew_fallback" && \
                  "$install_scenario" != "recommend_manual_or_brew_install" ]]; then
                verbLog 0 "ASDF_SETUP: asdf core installation using designated package manager failed or was skipped."
            fi
        fi
    else
        verbLog 2 "ASDF_SETUP: asdf already installed and working. Skipping core installation steps."
    fi # End of ONE-TIME ASDF CORE INSTALLATION block


    # --- ASDF Shell Initialization (runs every time if asdf.sh found) ---
    # Try Homebrew path first (works for macOS and Linux with Homebrew)
    if _cfg_command_exists brew && brew --prefix asdf &>/dev/null && [ -f "$(brew --prefix asdf)/libexec/asdf.sh" ]; then
      _CFG_ASDF_SCRIPT_TO_SOURCE="$(brew --prefix asdf)/libexec/asdf.sh"
    elif [ -f "/usr/share/asdf/asdf.sh" ]; then # Common path for asdf-vm package on Linux (apt/dnf)
      _CFG_ASDF_SCRIPT_TO_SOURCE="/usr/share/asdf/asdf.sh"
    elif [ -f "/opt/asdf-vm/asdf.sh" ]; then
      _CFG_ASDF_SCRIPT_TO_SOURCE="/opt/asdf-vm/asdf.sh"
    elif [ -f "/opt/asdf/asdf.sh" ]; then
      _CFG_ASDF_SCRIPT_TO_SOURCE="/opt/asdf/asdf.sh"
    elif [ -f "${ASDF_DATA_DIR}/asdf.sh" ]; then # Fallback for manual git clone or binary download to ~/.asdf
      _CFG_ASDF_SCRIPT_TO_SOURCE="${ASDF_DATA_DIR}/asdf.sh"
    fi

    if [ -n "$_CFG_ASDF_SCRIPT_TO_SOURCE" ] && [ -f "$_CFG_ASDF_SCRIPT_TO_SOURCE" ]; then
      verbLog 2 "ASDF_SETUP: Initializing asdf by sourcing: ${_CFG_ASDF_SCRIPT_TO_SOURCE}"
      . "${_CFG_ASDF_SCRIPT_TO_SOURCE}" # Source the found asdf.sh

      # Ensure ASDF_DATA_DIR shims are in PATH.
      # $ASDF_DATA_DIR should be $HOME/.asdf as defined locally or exported by asdf.sh
      # Using the local definition for constructing the path is safe.
      if [[ ":$PATH:" != *":${ASDF_DATA_DIR}/shims:"* ]]; then
        export PATH="${ASDF_DATA_DIR}/shims:$PATH"
        verbLog 3 "ASDF_SETUP: Added asdf shims (${ASDF_DATA_DIR}/shims) to PATH."
      fi

      # Bash Completions
      if [ -n "$BASH_VERSION" ]; then # Only attempt for Bash sessions
        if _cfg_command_exists brew && [ -f "$(brew --prefix)/etc/bash_completion.d/asdf" ]; then # Homebrew
          _CFG_ASDF_COMPLETIONS_PATH="$(brew --prefix)/etc/bash_completion.d/asdf"
        elif [ -f "/usr/share/bash-completion/completions/asdf" ]; then # Standard for system completions (dnf/apt)
          _CFG_ASDF_COMPLETIONS_PATH="/usr/share/bash-completion/completions/asdf"
        elif [ -f "/usr/share/asdf/completions/asdf.bash" ]; then # Path from some asdf packages
          _CFG_ASDF_COMPLETIONS_PATH="/usr/share/asdf/completions/asdf.bash"
        elif [ -f "${ASDF_DATA_DIR}/completions/asdf.bash" ]; then # Fallback
          _CFG_ASDF_COMPLETIONS_PATH="${ASDF_DATA_DIR}/completions/asdf.bash"
        fi

        if [ -n "$_CFG_ASDF_COMPLETIONS_PATH" ] && [ -f "$_CFG_ASDF_COMPLETIONS_PATH" ]; then
          verbLog 3 "ASDF_SETUP: Sourcing asdf Bash completions from: ${_CFG_ASDF_COMPLETIONS_PATH}"
          . "$_CFG_ASDF_COMPLETIONS_PATH"
        else
          verbLog 2 "ASDF_SETUP: Bash completions for asdf not found in expected locations."
        fi
      fi # End Bash completions

      # --- ONE-TIME PLUGIN ADDITION (check flag file) ---
      if [ -f "${ASDF_FRESHLY_INSTALLED_FLAG_FILE}" ]; then
        verbLog 1 "ASDF_SETUP: asdf was freshly installed by this script. Adding standard plugins..."
        if _cfg_command_exists asdf && declare -f asdf >/dev/null 2>&1; then
            local -A plugins_to_add
            plugins_to_add=(
              ["golang"]="https://github.com/asdf-community/asdf-golang.git"
              ["java"]="https://github.com/halcyon/asdf-java.git"
              ["lua"]="https://github.com/Stratus3D/asdf-lua.git"
              ["neovim"]="https://github.com/richin13/asdf-neovim.git"
              ["nodejs"]="https://github.com/asdf-vm/asdf-nodejs.git"
              ["python"]="https://github.com/danhper/asdf-python.git"
              ["ruby"]="https://github.com/asdf-vm/asdf-ruby.git"
              ["rust"]="https://github.com/code-lever/asdf-rust.git"
              ["tree-sitter"]="https://github.com/ivanvc/asdf-tree-sitter.git"
            )
            local plugin_name plugin_url
            for plugin_name in "${!plugins_to_add[@]}"; do
              plugin_url="${plugins_to_add[$plugin_name]}"
              verbLog 1 "ASDF_SETUP: Adding plugin: ${plugin_name} from ${plugin_url}"
              if asdf plugin add "${plugin_name}" "${plugin_url}"; then
                verbLog 2 "ASDF_SETUP: Plugin ${plugin_name} added successfully."
              else
                verbLog 0 "ASDF_SETUP: Failed to add plugin: ${plugin_name}."
              fi
            done
        else
            verbLog 0 "ASDF_SETUP: asdf command/function not properly available after sourcing. Skipping plugin additions."
        fi
        rm -f "${ASDF_FRESHLY_INSTALLED_FLAG_FILE}" # Remove flag after processing
      fi # End ONE-TIME PLUGIN ADDITION

      # Golang env setup (every time, conditional on Go being active)
      if _cfg_command_exists asdf && declare -f asdf >/dev/null 2>&1 && asdf where golang >/dev/null 2>&1; then
        verbLog 2 "ASDF_SETUP: Found active golang via asdf. Setting Go env vars by sourcing plugin script..."
        # Ensure ASDF_DATA_DIR is correctly referenced for the plugin path
        # The local ASDF_DATA_DIR from the top of _cfg_asdf_setup_main is $HOME/.asdf
        if [ -f "${ASDF_DATA_DIR}/plugins/golang/set-env.bash" ]; then
            . "${ASDF_DATA_DIR}/plugins/golang/set-env.bash"
            verbLog 3 "ASDF_SETUP: Golang environment sourced. GOROOT should be set."
            # GOROOT, GOPATH etc. are set by the sourced script.
            # You can log them here if needed: verbLog 3 "ASDF_SETUP: GOROOT=${GOROOT:-not set}"
        else
            verbLog 0 "ASDF_SETUP: Golang set-env.bash script not found at ${ASDF_DATA_DIR}/plugins/golang/set-env.bash"
        fi
      else
        verbLog 2 "ASDF_SETUP: asdf 'golang' not active or asdf cmd/function unavailable. Skipping Go env setup."
      fi

    else # asdf.sh not found by any method
      verbLog 0 "ASDF_SETUP: asdf.sh could not be determined or file does not exist. asdf will not be available."
      return 1 # Indicate failure from main function
    fi # End ASDF Shell Initialization

    return 0 # Indicate success from main function
}

# --- Execute the main setup logic ---
# (verbLog must be available globally for these logs to show if _cfg_asdf_setup_main itself fails early)
if _cfg_asdf_setup_main; then
    verbLog 2 "ASDF_SETUP: ASDF environment configuration processed."
else
    verbLog 0 "ASDF_SETUP: ASDF environment configuration encountered a critical error."
fi

# --- Set the "sourced once" guard variable AT THE VERY END of this script file ---
# This is the guard for THIS SCRIPT FILE (e.g., ~/.multiple_runtime_version_management)
_CFG_ASDF_SETUP_SOURCED="true" # Changed name to match the top guard
export _CFG_ASDF_SETUP_SOURCED

