#!/usr/bin/env bash

# asdf settings
# Configure asdf (see https://asdf-vm.com/guide/getting-started.html)
# Prefer urls when installing plugins see https://github.com/asdf-vm/asdf-plugins?tab=readme-ov-file#plugin-list
# VerbLog function is defined globally and available before this script is sourced
# This script file does NOT set a "source once" guard for itself.
# It relies on its internal logic to perform one-time actions only when needed,
# and performs shell initializations (sourcing asdf.sh, PATH, completions) every time.
# asdf setup — brew on macOS/Linuxbrew when present; otherwise use pre-copied binary asset
# Complies with asdf docs: binary on PATH, add shims to PATH, Bash completions via `asdf completion bash`.

# --- helpers ---
if ! declare -f _cfg_command_exists >/dev/null 2>&1; then
  _cfg_command_exists() { command -v "$1" >/dev/null 2>&1; }
fi

_asdf_expected_asset_hint() {
  local os arch
  os="$(uname -s)"
  arch="$(uname -m)"
  case "$os/$arch" in
    Darwin/arm64)   echo "asdf-<VERSION>-darwin-arm64.tar.gz" ;;
    Darwin/x86_64)  echo "asdf-<VERSION>-darwin-amd64.tar.gz" ;;
    Linux/aarch64)  echo "asdf-<VERSION>-linux-arm64.tar.gz"  ;;
    Linux/arm64)    echo "asdf-<VERSION>-linux-arm64.tar.gz"  ;;
    Linux/x86_64)   echo "asdf-<VERSION>-linux-amd64.tar.gz"  ;;
    Linux/i386|Linux/i686) echo "asdf-<VERSION>-linux-386.tar.gz" ;;
    *)               echo "<unknown, choose correct asdf asset manually>" ;;
  esac
}

# --- main ---
_cfg_asdf_setup_main() {
  # asdf data dir (plugins/installs/shims) per docs
  export ASDF_DATA_DIR="${HOME}/.asdf"  # must be absolute path
  local ASDF_FRESH_FLAG="${ASDF_DATA_DIR}/.cfg_asdf_plugins_pending"

  verbLog 2 "ASDF_SETUP: start (OS=$(uname -s) ARCH=$(uname -m))"

  # 1) Ensure asdf core (policy: brew when available; else expect release-asset binary on PATH)
  if ! (_cfg_command_exists asdf && asdf --version &>/dev/null); then
    if _cfg_command_exists brew; then
      # macOS Homebrew OR Linuxbrew (e.g., your Pi)
      verbLog 1 "ASDF_SETUP: installing/upgrading via Homebrew..."
      if brew list asdf &>/dev/null || brew install asdf; then
        mkdir -p "${ASDF_DATA_DIR}"
        [ ! -f "${ASDF_FRESH_FLAG}" ] && touch "${ASDF_FRESH_FLAG}"
        verbLog 1 "ASDF_SETUP: brew provided 'asdf'."
      else
        verbLog 0 "ASDF_SETUP: brew install asdf failed; please fix brew."
        return 1
      fi
    else
      # Expect you already placed the official binary asset into ~/.local/bin or /usr/local/bin
      local pref="${HOME}/.local/bin/asdf" sys="/usr/local/bin/asdf"
      if [ -x "$pref" ] || [ -x "$sys" ]; then
        if [ -x "$pref" ] && [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
          export PATH="$HOME/.local/bin:$PATH"
          verbLog 3 "ASDF_SETUP: added ~/.local/bin to PATH (current shell)."
        fi
        if ! (_cfg_command_exists asdf && asdf --version &>/dev/null); then
          verbLog 0 "ASDF_SETUP: asdf not on PATH after exposing ~/.local/bin. Check your install."
          return 1
        fi
        mkdir -p "${ASDF_DATA_DIR}"
        [ ! -d "${ASDF_DATA_DIR}/plugins" ] && touch "${ASDF_FRESH_FLAG}"
        verbLog 2 "ASDF_SETUP: using pre-copied asdf binary."
      else
        verbLog 0 "ASDF_SETUP: asdf binary not found."
        verbLog 0 "ASDF_SETUP: expected asset for this platform: $(_asdf_expected_asset_hint)"
        verbLog 0 "ASDF_SETUP: example:"
        verbLog 0 "  mkdir -p ~/.local/bin && tar -xzf asdf-<VERSION>-<platform>.tar.gz && install -m 0755 asdf ~/.local/bin/asdf"
        return 1
      fi
    fi
  else
    verbLog 2 "ASDF_SETUP: asdf already present."
  fi

  # 1.5) Initialize asdf's shell functions and command wrappers (critical for Java/javac detection)
  if _cfg_command_exists asdf; then
    if asdf init bash &>/dev/null; then
      # Use 'asdf init' if available, as it is the modern way to set up the shell environment
      source <(asdf init bash)
      verbLog 3 "ASDF_SETUP: executed 'asdf init bash' for shell setup."
    else
      # Fallback to sourcing the old asdf.sh if init isn't found/working
      if [ -f "${ASDF_DATA_DIR}/asdf.sh" ]; then
        source "${ASDF_DATA_DIR}/asdf.sh"
        verbLog 3 "ASDF_SETUP: sourced legacy asdf.sh for shell setup."
      fi
    fi
  fi

  # 2) Ensure shims path (required by docs)
  if [[ ":$PATH:" != *":${ASDF_DATA_DIR}/shims:"* ]]; then
    export PATH="${ASDF_DATA_DIR}/shims:$PATH"
    verbLog 3 "ASDF_SETUP: added ${ASDF_DATA_DIR}/shims to PATH."
  fi

  # 3) Bash completions
  if [ -n "$BASH_VERSION" ] && _cfg_command_exists asdf; then
    if asdf completion bash >/dev/null 2>&1; then
      source <(asdf completion bash)
      verbLog 3 "ASDF_SETUP: enabled Bash completions via 'asdf completion bash'."
    else
      local _c=""
      if   [ -f "/usr/share/bash-completion/completions/asdf" ]; then _c="/usr/share/bash-completion/completions/asdf"
      elif [ -f "/usr/share/asdf/completions/asdf.bash" ]; then        _c="/usr/share/asdf/completions/asdf.bash"
      elif [ -f "${ASDF_DATA_DIR}/completions/asdf.bash" ]; then       _c="${ASDF_DATA_DIR}/completions/asdf.bash"
      fi
      if [ -n "$_c" ]; then
        source "$_c"
        verbLog 3 "ASDF_SETUP: enabled legacy Bash completions: $_c"
      else
        verbLog 2 "ASDF_SETUP: no completion source available."
      fi
    fi
  fi

  # 4) One-time plugin bootstrap
  if [ -f "${ASDF_FRESH_FLAG}" ]; then
    verbLog 1 "ASDF_SETUP: fresh install detected — adding standard plugins…"
    if _cfg_command_exists asdf; then
      declare -A plugins_to_add=(
        [golang]="https://github.com/asdf-community/asdf-golang.git"
        [java]="https://github.com/halcyon/asdf-java.git"
        [lua]="https://github.com/Stratus3D/asdf-lua.git"
        [neovim]="https://github.com/richin13/asdf-neovim.git"
        [nodejs]="https://github.com/asdf-vm/asdf-nodejs.git"
        [python]="https://github.com/danhper/asdf-python.git"
        [ruby]="https://github.com/asdf-vm/asdf-ruby.git"
        [rust]="https://github.com/code-lever/asdf-rust.git"
        [tree-sitter]="https://github.com/ivanvc/asdf-tree-sitter.git"
      )
      for plugin_name in "${!plugins_to_add[@]}"; do
        verbLog 1 "ASDF_SETUP: adding plugin: ${plugin_name}"
        if asdf plugin add "${plugin_name}" "${plugins_to_add[$plugin_name]}"; then
          verbLog 2 "ASDF_SETUP: ${plugin_name} added."
        else
          verbLog 0 "ASDF_SETUP: failed to add ${plugin_name}."
        fi
      done
    else
      verbLog 0 "ASDF_SETUP: 'asdf' not available; skipping plugin additions."
    fi
    rm -f "${ASDF_FRESH_FLAG}"
  fi

  # 5) Optional Go environment hook
  if _cfg_command_exists asdf && asdf where golang >/dev/null 2>&1; then
    if [ -f "${ASDF_DATA_DIR}/plugins/golang/set-env.bash" ]; then
      source "${ASDF_DATA_DIR}/plugins/golang/set-env.bash"
      verbLog 3 "ASDF_SETUP: Golang env loaded (GOROOT=${GOROOT:-unset})."
    fi
  fi

  return 0
}

# run
if _cfg_asdf_setup_main; then
  verbLog 2 "ASDF_SETUP: done."
else
  verbLog 0 "ASDF_SETUP: critical error."
fi

