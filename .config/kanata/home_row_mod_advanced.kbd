;; vim: set ft=lisp:

;; Home row mods QWERTY example with more complexity.
;; Some of the changes from the basic example:
;; - when a home row mod activates tap, the home row mods are disabled
;;   while continuing to type rapidly
;; - tap-hold-release helps make the hold action more responsive
;; - pressing another key on the same half of the keyboard
;;   as the home row mod will activate an early tap action
;; - rfjr added Caps Lock Behavior to register Escape on tap and Control on hold
;; - used this guide to preserve special functions on top of function keys
;;   https://github.com/jtroo/kanata/issues/975#issuecomment-2489950660

(defcfg
  process-unmapped-keys yes
  concurrent-tap-hold   yes
)

;; Source/Physical Keys
(defsrc
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet rctl
  fn
)

;; Base layer: as modified here
;; - Media controls on the top row in place of the usual F-keys
;; - 'fn' key on the bottom row for toggling the Fn layer
(deflayer base
  esc   f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
  grv   1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab   q    w    e    r    t    y    u    i    o    p    [    ]    \
  @caps @a   @s   @d   @f   g    h    @j   @k   @l   @;    '    ret
  lsft  z    x    c    v    b    n    m    ,    .    /    rsft
  lctl  lmet lalt           spc            ralt rmet rctl
  @fnl
)

;; Special layer mostly above function keys, but others could be added
;; _   brdn brup  @mc   @sls  @dtn  @dnd  prev  pp  next  mute  vold  volu
(deflayer special-keys
  esc  üîÖ   üîÜ   @mc  @sls @dtn @dnd ‚óÄ‚óÄ   ‚ñ∂‚è∏   ‚ñ∂‚ñ∂   üîá   üîâ   üîä
  _    _    _    _    _    _    _    _    _    _    _    _    _    del
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    @lp  _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _              _              _    _    _
  _
)

;; for keys with tap-hold logic, what is
;; the default key behavior without any modifiers
(deflayer nomods
  _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _
  caps a    s    d    f    _    _    j    k    l    ;    _    _
  _    _    _    _    _    _    _    _    _    _    _    _
  _    _    _              _              _    _    _
  fn
)

;; Define a fake key to switch back to base if needed
(deffakekeys
  to-base (layer-switch base)
)

(defchordsv2
  ;; TODO Works but caps lock LED light doesn't turn on
  (lsft rsft) caps 300 all-released ()
)

;; Variables for tap-hold timing (tweak as you wish)
(defvar
  ;;; Adjust times based on finger speed and key position
  pinky-tap-time 240
  pinky-hold-time 190
  ring-tap-time 240
  ring-hold-time 190
  middle-tap-time 200
  middle-hold-time 150
  index-tap-time 200
  index-hold-time 150

  ;; Key mappings divided by hand and finger speed
  left-hand-keys (
    q w e r t
    a s d f g
    z x c v b
  )
  right-hand-keys (
    y u i o p
    h j k l ;
    n m , . /
  )
)

(defalias
  tap (multi
      (layer-switch nomods)
      (on-idle-fakekey to-base tap 20)
    )

  ;; escape on tap, control on hold
  caps (tap-hold $index-tap-time $index-hold-time esc lctl)

  ;; Adjust timing based on specific finger speed and position (home row mods)
  a (tap-hold-release-keys $ring-tap-time $ring-hold-time (multi a @tap) lmet $left-hand-keys)
  s (tap-hold-release-keys $middle-tap-time $middle-hold-time (multi s @tap) lalt $left-hand-keys)
  d (tap-hold-release-keys $index-tap-time $index-hold-time (multi d @tap) lsft $left-hand-keys)
  f (tap-hold-release-keys $index-tap-time $index-hold-time (multi f @tap) lctl $left-hand-keys)

  j (tap-hold-release-keys $index-tap-time $index-hold-time (multi j @tap) rctl $right-hand-keys)
  k (tap-hold-release-keys $middle-tap-time $middle-hold-time (multi k @tap) rsft $right-hand-keys)
  l (tap-hold-release-keys $ring-tap-time $ring-hold-time (multi l @tap) ralt $right-hand-keys)
  ; (tap-hold-release-keys $pinky-tap-time $pinky-hold-time (multi ; @tap) rmet $right-hand-keys)

  ;; these special layer aliases perform key combinations that need to match what the os has (macOS and custom items shown here)
  ;; to be clear custom means define using macOS settings
  mc  C-up        ;; Mission Control (default)
  sls M-spc       ;; Spotlight Search just use M-space (default)
  dtn C-A-S-M-d   ;; Dictation (custom)
  dnd C-A-S-M-n   ;; Do Not Disturb (custom)
  lp  C-A-S-M-l   ;; Launchpad fn + l (note on some it's f4, but our f4 is spotlight search like on macbook pro) (custom)

  ;; special-keys layer on hold and return to base layer on release
  fnl (tap-hold 200 200 fn (layer-toggle special-keys))
)

