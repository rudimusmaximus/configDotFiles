#!/usr/bin/env bash

file_exists () {

  # Using argument expansion to capture all files provided as arguments.
  for FILE in "${@}"
    do
      if [[ ! -f $FILE ]]
      then
        echo "The file ${FILE} does not exist!"
      fi
    done
}

list () {
  echo "ls in color with -F designations"
  ls -F
}

go_home () {
  echo "Welcome ~ \$HOME"
  cd ~ || exit
  pwd
}

function aliases {
  mapfile -t my_array < <( compgen -A alias );
  echo "${my_array[@]}";
}

function functions {
  mapfile -t my_array < <( compgen -A function );
  echo "${my_array[@]}";
}

function findAndReplaceBsd {
  echo "
   OK ---> FIND '$1' and
   REPLACE WITH '$2' (on a BSD system like macOS or FreeBSD)...";
  foo="$1";
  bar="$2";
  echo "
   --- AFTER CHANGES --- RIPGREP '$2' ---"
  rg --files-with-matches "$foo" | xargs sed -i '' "s|$foo|$bar|g";
  rg "$2";
  echo "";
}

function findAndReplaceBsdF {
  echo "
   OK ---> FIND Fixed String '$1' and
   REPLACE WITH '$2' (on a BSD system like macOS or FreeBSD)...";
  foo="$1";
  bar="$2";
  echo "
   --- AFTER CHANGES --- RIPGREP '$2' ---"
  rg --files-with-matches -F "$foo" | xargs sed -i '' "s|$foo|$bar|g";
  rg -F "$2";
  echo "";
}

# assumes version alias and tries two ways to find local date in files
function semver() {
    echo "Checking package.json";
    jq -r .version package.json;
    echo "Checking src file";
    bat ./src/about/a_semantic_version.js;
}

# initiates a FaceTime call to a phone number using the open command
# with the tel protocol.
#
# The open command opens a file or URL with the default
# application associated with it
# The -a option specifies the application to open the file or URL with.
# In this case, we're specifying FaceTime as the application to open.
# The tel protocol followed by the phone number is passed as the argument
# to the open command.
# When the call function is called with a phone number,
# it opens FaceTime and initiates a call to the phone number specified.
# calls with iphone if setup or to person if they are a messages user
function call {
    open -a FaceTime "tel://$1"
}

function crypto() {
  echo "Checking my favorite crypto using api.coingecko.com..."
  curl -s -H 'Accept: application/json' 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,cardano&vs_currencies=usd' | jq .
}

function md() {
  pandoc $1 --highlight-style=tango -o /tmp/${1%.md}.html
  xdg-open /tmp/${1%.md}.html
}

function forget.extra() {
  echo "forgetting extra dot file changes by assuming unchanged";
  cfg update-index --assume-unchanged .extra;
}

# lists the prefixed with a v semver from the local package.json
# and copies it to the clipboard
# eg. v1.0.0
# uses pbcopy on macOS and xclip on Linux
function version() {
  version=$(jq -r ".version" package.json | awk '{print "v"$1}')
  echo "$version" | tee >(if [[ "$OSTYPE" == "darwin"* ]]; then pbcopy; else xclip -selection clipboard; fi)
}

# increments or sets the prerelease version and copies it to the clipboard
# eg. v1.0.0-beta.0
# uses pbcopy on macOS and xclip on Linux
function vp() {
  # Check if preid is provided
  if [ -n "$1" ]; then
    preid="$1"
    new_version=$(npm --no-git-tag-version version prerelease --preid="$preid" 2>/dev/null)
  else
    new_version=$(npm --no-git-tag-version version prerelease 2>/dev/null)
  fi

  # Prefix with 'v' and remove the 'v' added by npm
  new_version="v${new_version#v}"

  # Output the new version and copy it to the clipboard
  echo "$new_version" | tee >(if [[ "$OSTYPE" == "darwin"* ]]; then pbcopy; else xclip -selection clipboard; fi)
}

# directly sets the version string (you must dictate a valid semver string)
# and copies it to the clipboard with a prefix v
function v() {
  if [ -z "$1" ]; then
    echo "Usage: v <version>"
    return 1
  fi

  # Set the version using npm
  new_version=$(npm --no-git-tag-version version "$1" 2>/dev/null)

  # Prefix with 'v' and remove the 'v' added by npm
  new_version="v${new_version#v}"

  # Output the new version and copy it to the clipboard
  echo "$new_version" | tee >(if [[ "$OSTYPE" == "darwin"* ]]; then pbcopy; else xclip -selection clipboard; fi)
}

# Function: cfgstash
# Description:
#   - Stashes current changes in the configured Git repository with a predefined message.
#   - Creates a timestamped backup of the `.extra` file by copying it to `.extra.backup.YYYYMMDD_HHMMSS`.
#   - Logs all operations, including successes and errors, to ~/cfgstash.log.
#   - Provides feedback on the success or failure of each operation.
#
# Usage:
#   Simply type `cfgstash` in the terminal to execute the stash and backup operations.
function cfgstash() {
    # ----------------------------
    # Configuration Variables
    # ----------------------------

    # Stash Message
    local STASH_MESSAGE="dot_wip"

    # Paths for .extra and its backup
    local EXTRA_FILE="$HOME/.extra"

    # Timestamp format: YYYYMMDD_HHMMSS
    local TIMESTAMP
    TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

    # Backup File with Timestamp
    local BACKUP_FILE="$HOME/.extra.backup.$TIMESTAMP"

    # Log File Path
    local LOG_FILE="$HOME/cfgstash.log"

    # ----------------------------
    # Logging Function
    # ----------------------------

    log_message() {
        local MESSAGE="$1"
        echo "$(date +"%Y-%m-%d %H:%M:%S") - $MESSAGE" >> "$LOG_FILE"
    }

    # ----------------------------
    # Start of cfgstash Operations
    # ----------------------------

    # Log the start of the operation
    log_message "Starting cfgstash operation."

    # ----------------------------
    # Stash Operations
    # ----------------------------

    # Attempt to stash changes with the specified message using the cfg alias
    cfg stash push -m "$STASH_MESSAGE" 2>&1
    local STASH_STATUS=$?

    # Analyze stash outcome
    if [ $STASH_STATUS -eq 0 ]; then
        log_message "Git stash successful with message: \"$STASH_MESSAGE\"."
        echo "Git stash successful."
    elif [ $STASH_STATUS -eq 1 ]; then
        # Exit status 1 typically means there were no changes to stash
        log_message "Git stash: No local changes to save."
        echo "No local changes to stash."
    else
        # Any other exit status indicates an error
        log_message "Git stash failed with exit status $STASH_STATUS."
        echo "Error: Git stash failed with exit status $STASH_STATUS."
    fi

    # ----------------------------
    # Backup Operations
    # ----------------------------

    # Check if .extra exists before attempting to copy
    if [ -f "$EXTRA_FILE" ]; then
        # Attempt to copy .extra to the timestamped backup file
        cp "$EXTRA_FILE" "$BACKUP_FILE" 2>&1
        local COPY_STATUS=$?

        if [ $COPY_STATUS -eq 0 ]; then
            echo ".extra has been successfully backed up to $BACKUP_FILE."
            log_message "Successfully backed up .extra to $BACKUP_FILE."
        else
            echo "Error: Failed to create backup of .extra. Please check file permissions and paths."
            log_message "Error: Failed to create backup of .extra to $BACKUP_FILE."
        fi
    else
        echo "Warning: .extra file does not exist. No backup created."
        log_message "Warning: .extra file does not exist at $EXTRA_FILE. No backup created."
    fi

    # ----------------------------
    # Final Logging and Feedback
    # ----------------------------

    if [ "$STASH_STATUS" -eq 0 ] && [ "$COPY_STATUS" -eq 0 ]; then
        echo "cfgstash operation completed successfully."
        log_message "cfgstash operation completed successfully."
    elif [ "$STASH_STATUS" -eq 0 ] && [ "$COPY_STATUS" -ne 0 ]; then
        echo "cfgstash operation completed with errors during backup."
        log_message "cfgstash operation completed with errors during backup."
    elif [ "$STASH_STATUS" -eq 1 ] && [ "$COPY_STATUS" -eq 0 ]; then
        echo "cfgstash operation completed successfully (no changes to stash)."
        log_message "cfgstash operation completed successfully (no changes to stash)."
    elif [ "$STASH_STATUS" -eq 1 ] && [ "$COPY_STATUS" -ne 0 ]; then
        echo "cfgstash operation had no changes to stash and encountered errors during backup."
        log_message "cfgstash operation had no changes to stash and encountered errors during backup."
    elif [ "$STASH_STATUS" -ne 0 ] && [ "$COPY_STATUS" -eq 0 ]; then
        echo "cfgstash operation failed during stash but backup was successful."
        log_message "cfgstash operation failed during stash but backup was successful."
    else
        echo "cfgstash operation failed during stash and backup."
        log_message "cfgstash operation failed during stash and backup."
    fi
}

